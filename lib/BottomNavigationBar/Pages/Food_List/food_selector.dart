import 'package:diet_recall3/BottomNavigationBar/Pages/Home/food_taken.dart';
import 'package:diet_recall3/routes.dart';
import 'package:flutter/material.dart';
import 'package:hive/hive.dart';

class FoodSelector extends StatefulWidget {
  FoodSelector({Key? key, required this.id}) : super(key: key);
  var id;

  @override
  State<FoodSelector> createState() => _FoodSelectorState();
}

//id=food

class _FoodSelectorState extends State<FoodSelector> {
  String q = "";
  final _myBox = Hive.box('mybox');
  int findItemIndex(String item) {
    final List<String> itemsList = [
      //in litres
      'Raita',
      'Milk',
      //in grams
      'Paneer',
      'Dosa',
      'Oats',
      'Anjeer',
      'Corn Flakes',
      'Curd',
      'Aata Halwa',
      'Aloo Gobi',
      'Aloo ',
      'Avocodo ',
      'Banana Chips',
      'Beans',
      'Beet Root',
      'Bhajiya',
      'Bhelpuri',
      'Bhindi Sabzi',
      'Biryani',
      'Bread Pakoda',
      'Besan Gatta',
      'Butter Chicken',
      'Butterscotch Cake',
      'Chakli',
      'Chana Masala',
      'Chicken',
      'Chiku',
      'Chilli Paneer',
      'ChocoBar',
      'Chocolate Cake',
      'Chocolate Icecream',
      'ChocoLava',
      'Dal',
      'Dal Baafle',
      'Dal Baati',
      'Dal Makhani',
      'Dal Pakwan',
      'Dates',
      'Dum Aloo',
      'Egg Burji',
      'Egg Curry',
      'Egg Roll',
      'Fafda',
      'Firni',
      'Fish Curry',
      'Fish Pakora',
      'French Fries',
      'Fried Momos',
      'Fruit Custard',
      'Fry Fish',
      'Gajjar Halwa',
      'Garlic Naan',
      'Ghewar',
      'Gobi Manchurian',
      'Grapes',
      'Guava',
      'Gulab Jamun',
      'Harabhara Kabab',
      'Idli Sambhar',
      'Jalebi',
      'Jeera Aloo',
      'kachori',
      'Kada Halwa',
      'Kadai Paneer',
      'Karela Sabzi',
      'Katori Chaat',
      'Khaman',
      'Kheer',
      'Khichdi',
      'Kiwi',
      'Kofta',
      'Kulcha',
      'Kulfi',
      'Laddu',
      'Lassi',
      'Lauki Sabzi',
      'Litchi',
      'Maggie',
      'Makka Roti',
      'Malpua',
      'Masala dosa',
      'Masala Papad',
      'Mushroom Veg',
      'Mutton',
      'Matar Paneer',
      'Missi Roti',
      'Mix Veg',
      'Moong Halwa',
      'MuttonCurry',
      'Naan',
      'Noodles',
      'Palak Paneer',
      'Paneer Paratha',
      'PaniPuri',
      'Papad',
      'Papaya',
      'PapdiChaat',
      'Pasta',
      'Pear',
      'Petha',
      'Pineapple',
      'Poha',
      'Pomogranate',
      'Potato Chips',
      'Prawns',
      'Pulao',
      'Puri',
      'Rajma Chawal',
      'RasMalai',
      'Rice',
      'Sabudana Khichdi',
      'Sambar Vada',
      'Sarson Saag',
      'Schezwan Noddles',
      'Schezwan Rice',
      'Sev',
      'Seviyan Kheeri',
      'Sev Tomator',
      'Shrikhand',
      'Steam Momos',
      'Strawberry',
      'Strawberry Cake',
      'Sweet Corn',
      'Tandoori Fish',
      'Tandoori Roti',
      'Toast',
      'Upma',
      'Uttapam',
      'Vada Pav',
      'Vanilla Cake',
      'Veg Biryani',
      'Watermelon',
      'Whitesauce Pasta',
      'Dum Briyani',
      //end in grams

      //in numbers
      'Chapati',
      'Aloo Paratha',
      'Apple',
      'Banana',
      'Mango',
      'Orange',
      'Bread',
      'Paratha',
      'Pickle',
      'Appe',
      'BakeSamosa',
      'Barfi',
      'Burger',
      'Chole Bhature',
      'Chole Samosa',
      'Dabeli',
      'Dahi Bhalla',
      'Garlic Bread',
      'Kaju Katli',
      'Mango',
      'Modak',
      'Omlet',
      'Paneer Roll',
      'Pizza',
      'Rasgulla',
      'Samosa',
      'Sandesh',
      'Sandwich',
      'Sprill Potato',
      'Spring Roll',
      'Boiled Egg',

      //numbers end
    ];
    for (int i = 0; i < itemsList.length; i++) {
      if (item == itemsList.elementAt(i)) {
        return i;
      }
    }
    return 0;
  }

  double findProtein(int index) {
    final List<double> protein = [
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.05,
      0.0332,
      0.014,
      0.0503,
      0.1,
      0.0332,
      0.014,
      0.0503,
      0.1,
      2.34,
      5.94,
      0.36,
      1.28,
      1.06,
      1.23,
      1.91,
      5.16,
      0.01,
      0.01,
      0.1,
      0.1,
      2,
      2.34,
      5.94,
      0.36,
      1.28,
      1.06,
      1.23,
      1.91,
      5.16,
      6,
      1.28,
      8,
      0.36,
      1.28,
      1.06,
      1.23,
      1.91,
      1.28,
      6,
    ];
    return protein.elementAt(index);
  }

  double findCarbs(int index) {
    final List<double> carbs = [
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.11,
      0.0446,
      0.0297,
      0.42,
      0.27,
      0.0446,
      0.0297,
      0.42,
      0.27,
      13,
      47.72,
      19.06,
      26.95,
      35.19,
      15.39,
      12.65,
      38.94,
      0.04,
      0.02,
      3.4,
      3.4,
      34,
      13,
      47.72,
      19.06,
      26.95,
      35.19,
      15.39,
      12.65,
      38.94,
      0.42,
      26.95,
      22.56,
      19.06,
      26.95,
      35.19,
      15.39,
      12.65,
      26.95,
      0.42,
    ];
    return carbs.elementAt(index);
  }

  double findCalories(int index) {
    final List<double> calories = [
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      1.13,
      0.62,
      2.93,
      2.12,
      13,
      0.62,
      2.93,
      2.12,
      13,
      285,
      330,
      72,
      105,
      135,
      62,
      66,
      260,
      1,
      0.1,
      12,
      12,
      123,
      285,
      330,
      72,
      105,
      135,
      62,
      66,
      260,
      93,
      105,
      188,
      72,
      105,
      135,
      62,
      66,
      105,
      93,
    ];
    return calories.elementAt(index);
  }

  String test(String id) {
    if (id == 'Chapati') return "Roti";
    return "Food";
  }

  String findInWhat(int index) {
    if (index == 0 || index == 1) {
      return "in ml";
    } else if (index >= 2 && index <= 133) {
      return "in Grams";
    }

    return "in numbers";
  }

  double protein = 0;
  double carbs = 0;
  double calories = 0;

  @override
  Widget build(BuildContext context) {
    int index = findItemIndex(widget.id);
    String inWhat = findInWhat(index);
    return Scaffold(
      appBar: AppBar(
        title: Text('${widget.id} $index',
            style: const TextStyle(color: Colors.black)),
        backgroundColor: Colors.grey.withOpacity(0.01),
        elevation: 0,
        centerTitle: true,
        iconTheme: const IconThemeData(
          color: Colors.black, //change your color here
        ),
      ),
      body: SingleChildScrollView(
        child: Center(
            child:
                // ? Text('numbers')
                Container(
          // alignment: Alignment.center,
          margin: const EdgeInsets.fromLTRB(0, 50, 0, 0),
          padding: const EdgeInsets.all(8),
          height: 400,
          width: double.infinity,

          decoration: BoxDecoration(
            // color: Colors.orange.shade200,
            borderRadius: BorderRadius.circular(10),
          ),
          child: Column(
            children: [
              const Text('Nutritional Content',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 17)),
              const SizedBox(
                height: 10,
              ),
              const Divider(),
              DataTable(columns: const [
                DataColumn(label: Text('Protein')),
                DataColumn(label: Text('Carbohydrates')),
                DataColumn(label: Text('Calories'))
              ], rows: [
                DataRow(cells: [
                  DataCell(Text(protein.toString())),
                  DataCell(Text(carbs.toString())),
                  DataCell(Text(calories.toString()))
                ])
              ]),
              const Divider(),
              const SizedBox(
                height: 20,
              ),
              Flexible(
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(30, 0, 30, 0),
                  child: TextFormField(
                      onChanged: (value) {
                        setState(() {
                          q = value;
                          try {
                            protein = double.parse(value) * findProtein(index);
                            calories = double.parse(value) * 40;
                          } catch (e) {
                            protein = 0;
                          }

                          try {
                            carbs = double.parse(value) * findCarbs(index);
                          } catch (e) {
                            carbs = 0;
                          }

                          try {
                            calories =
                                double.parse(value) * findCalories(index);
                          } catch (e) {
                            calories = 0;
                          }
                        });
                      },
                      decoration: InputDecoration(
                        hintText: 'Enter Quantity $inWhat',
                        fillColor: Colors.white,
                        filled: true,
                      )),
                ),
              ),
              const SizedBox(
                height: 20,
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(primary: Colors.orange),
                onPressed: () {
                  if (protein != 0 && carbs != 0 && calories != 0) {
                    _myBox.put('ProteinTaken',
                        protein.toInt() + _myBox.get('ProteinTaken'));
                    _myBox.put(
                        'CarbsTaken', carbs.toInt() + _myBox.get('CarbsTaken'));
                    _myBox.put('CaloriesTaken',
                        calories.toInt() + _myBox.get('CaloriesTaken'));
                  } else {
                    return;
                  }
                  List<String> food = _myBox.get('foodTaken');
                  food.add(widget.id);
                  List<String> quant = _myBox.get('quantity');
                  quant.add(q);
                  _myBox.put('foodTaken', food);
                  _myBox.put('quantity', quant);
                  ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                    duration: const Duration(milliseconds: 800),
                    backgroundColor: Colors.grey.shade100,
                    content: const Text(
                      "Added ✓",
                      style: TextStyle(
                          color: Colors.black, fontWeight: FontWeight.bold),
                    ),
                  ));
                  Navigator.pop(context);
                  // Navigator.pushNamed(context, MyRoutes.searchHome);
                },
                // icon: Icon(Icons.check),
                child: const Text('ADD'),
              )
            ],
          ),
        )
            // child: Text(test(id))
            ),
      ),
    );
  }
}
